import ip
import vyos

entity Group extends vyos::ConfigNode:
    string name
end

index Group(name, host)

entity AddressGroup extends Group:
    string addresses
    string description="inmanta managed address-group"
end

implementation addressGroup for AddressGroup:
    self.node_name = "firewall group address-group"
    self.type = "address-group"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/firewall_addres_group.j2"), 
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement AddressGroup using addressGroup

entity NetworkGroup extends Group:
    ip::cidr[] networks
    string description = "inmanta managed network-group"
end

implementation networkGroup for NetworkGroup:
    self.node_name = "firewall group network-group"
    self.type = "network-group"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/firewall_network_group.j2"), 
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement NetworkGroup using networkGroup

entity PortGroup extends Group:
    string[] ports
    string description = "inmanta managed port-group"
end

implementation portGroup for PortGroup:
    self.node_name = "firewall group port-group"
    self.type = "port-group"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/firewall_port_group.j2"), 
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end

implement PortGroup using portGroup

typedef action_t as string matching self in ["accept", "drop", "reject"]
typedef protocol_t as string matching self in ["tcp_udp", "all", "icmp", "tcp", "udp"] # Only a small subset for now

entity Rule:
    number id
    action_t action
    protocol_t protocol
    string description = "inmanta managed rule"
end

Rule.source[0:] -- Group
Rule.destination[0:] -- Group

index Rule(id)

entity RuleSet extends ConfigNode:
    string name
    action_t default_action
    string description = "inmanta managed ruleset"
end

index RuleSet(name, host)
RuleSet.rules[0:] -- Rule

implementation ruleSet for RuleSet:
    self.node_name = "firewall name"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/firewall_ruleset.j2"),
        requires=[self.host.requires, self.requires],
        provides=self.provides,
        purged=self.purged,
        purge_on_delete=self.purge_on_delete,
    )
end
