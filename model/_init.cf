"""
    Vyos interface module

    :copyright: 2018 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA
"""

import ip
import net
import ssh

os = std::OS(family=std::linux, name="vyos", version=1.1)

typedef area as number matching self >= 0 and self < 1
typedef smp_affinity as string matching /^(\d{1,5}\s*$)|(auto)$/ 
typedef duplex as string matching self == "auto" or self == "half" or self == "full"
typedef speed as string matching /^(\d{1,5}\s*$)|(auto)$/
typedef address as string matching self == "dhcp" or self == "dhcpv6" or ip::is_valid_ip_v10(self) == true


# General Framework

entity ConfigItem:
    string config
end

entity Config extends ConfigItem, std::PurgeableResource:
    """
        VYOS config block resource

        This is the central resource, that is used to deploy specific configlets. 

        :attr keys_only: Only compare these keys, ignore all other keys that are in the current state
        :attr ignore_keys: Ignore these keys in the current state
    """
    string device
    string node
    bool never_delete=false
    bool save=true
    bool send_event=true
    string[] keys_only=[]
    string[] ignore_keys=[]
end

index Config(device, node)

Config.credential [1] -- Credential

entity ExtraConfig extends ConfigItem:
end

implement ExtraConfig using std::none

Config.extra [0:] -- ExtraConfig

implement Config using std::none

entity Credential:
    string address
    string user
    string password
    number port
end

implement Credential using std::none

entity BaseHost extends ip::Host:
    """
        A vyos (or derivative) based host.
    """
    string user="inmanta"
    string password="inmanta"
    number port=22    
end

entity Host extends BaseHost:

end

implementation vyosConfig for BaseHost:
    std::AgentConfig(autostart=true, agentname=name, uri="local:", provides=self)
    self.os = vyos::os
end

implementation commonConfig for BaseHost:
    self.credential = vyos::Credential(address=self.ip, user=self.user,
                                        password=self.password, port=self.port)
end


implement BaseHost using vyosConfig
implement BaseHost using parents

implement Host using parents
implement Host using commonConfig

BaseHost.credential [1] -- Credential

entity ConfigNode:
    string node_name
end


ConfigNode.config [0:1] -- ConfigItem
ConfigNode.host [1] -- BaseHost

entity Masquerade extends ConfigNode:
    string outbound_interface
    string source_address
    number rule
end

index Masquerade(host, rule)

implement Masquerade using masq

implementation masq for Masquerade:
    self.node_name = "nat source rule {{ rule }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/masq.j2"), requires=self.host.requires)
end

entity Interface extends ConfigNode:
    string name
    ip::cidr? address=null
    bool dhcp=false
    bool never_delete=false
    duplex duplex = "auto"
    speed speed = "auto"
    smp_affinity smp_affinity = "auto"
end

# entity Ethernet extends ConfigNode: 
#     duplex duplex = "auto"
#     speed speed = "auto"
#     smp_affinity smp_affinity = "auto"
#     address address = "dhcp"
# end

entity Loopback extends ConfigNode:
    string loName
    ip::cidr loAddress = ""
end

entity Ospf extends ConfigNode:
    area area = 0 
    ip::cidr network=""
    ip::ip router_id=""
end

Interface.traffic_policy_out [0:1] -- Shaper.interfaces_in [0:]
Interface.traffic_policy_in [0:1] -- Shaper.interfaces_out [0:]

implementation iface for Interface:
    self.node_name = "interfaces ethernet {{ name }}"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/interface.j2"), 
        requires=self.host.requires
    )
end

implementation loopback for Loopback:
    self.node_name = "interfaces loopback {{ loName }}"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/lointerface.j2"),
        requires=self.host.requires
    )
end

implementation ospf for Ospf:  
    self.node_name = "protocols ospf"
    self.config = vyos::Config(
        device=self.host.name,
        node=self.node_name,
        credential=self.host.credential,
        config=std::template("vyos/ospf.j2"),
        requires=self.host.requires,
    )
end


implement Interface using iface

implement Loopback using loopback

implement Ospf using ospf

Vif.parent [1] -- Interface

entity Vif extends Interface:
    net::vlan_id vlan
    string type="vif"
    string name=""
end

index Vif(parent, vlan)

implementation vif for Vif:
    self.host = self.parent.host
    self.node_name = "{{ parent.node_name}} vif {{ vlan }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/vif.j2"), requires=[self.requires, self.host.requires])
end

implement Vif using vif

entity Bridge extends Interface:
    string type="bridge"
end

Interface.bridge_group [0:1] -- Bridge.interfaces [0:]

implement Bridge using bridge

implementation bridge for Bridge:
    self.node_name = "interfaces bridge {{name}}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/bridge.j2"), requires=[self.requires, self.host.requires])

    self.config.provides = self.interfaces
end


entity DhcpServer extends ConfigNode:
    string name
    ip::cidr subnet
    ip::ip default_router
    ip::ip[] dns_servers
    ip::ip range_start
    ip::ip range_end
end

implementation dhcpServer for DhcpServer:
    self.node_name = "service dhcp-server shared-network-name {{ name }} subnet {{ subnet }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/dhcp.j2"), requires=self.host.requires)
end

implement DhcpServer using dhcpServer

entity StaticRoute extends ConfigNode:
    ip::cidr destination
    ip::ip next_hop
    number table=0
end

implementation staticRouteDefault for StaticRoute:
    self.node_name = "protocols static route {{destination}} next-hop {{ next_hop }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement StaticRoute using staticRouteDefault when table == 0

implementation staticRouteTable for StaticRoute:
    self.node_name = "protocols static table {{ table }} route {{destination}} next-hop {{ next_hop }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement StaticRoute using staticRouteTable when table > 0

entity PolicyRoute extends ConfigNode:
    string name
    number rule
    number table
end

implementation policyRoute for PolicyRoute:
    self.node_name = "policy route {{name}} rule {{rule}} set table {{table}}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement PolicyRoute using policyRoute

entity Shaper extends ConfigNode:
    string name
    string bandwidth
    string default_bandwidth="50%"
    string default_ceiling="100%"
    string default_queue_type="fair-queue"
end

implementation shaper for Shaper:
    self.node_name = "traffic-policy shaper {{ name }}"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/shaper.j2"), 
        requires=[self.host.requires, self.requires]
    )

    for iface in self.interfaces_in:
        iface.config.requires = self.config
    end

    for iface in self.interfaces_out:
        iface.config.requires = self.config
    end
end

implement Shaper using shaper

entity Hostname extends ConfigNode:
    string name
end

index Hostname(host)

implementation hostname for Hostname:
    self.node_name = "system host-name"
    self.config = vyos::Config(
        device=self.host.name, 
        node=self.node_name, 
        credential=self.host.credential,
        config=std::template("vyos/hostname.j2"), 
        requires=[self.host.requires, self.requires],
        provides=self.provides
    )
end

implement Hostname using hostname